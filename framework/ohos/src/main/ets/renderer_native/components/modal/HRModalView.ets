/*
 * Tencent is pleased to support the open source community by making
 * Hippy available.
 *
 * Copyright (C) 2022 THL A29 Limited, a Tencent company.
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { HRComponent } from '../../HippyRenderView'
import { NativeRenderContext } from '../../NativeRenderContext'
import { HRGestureDispatcher } from '../../uimanager/HRGestureDispatcher'
import { HREventType, HREventUtils } from '../../utils/HREventUtils'
import HippyRenderBaseView, { HippyObservedArray,
  HIPPY_COMPONENT_KEY_PREFIX } from '../base/HippyRenderBaseView'
import { LogUtils } from '../../../support/utils/LogUtils'
import { HippyAny, HippyRenderCallback } from '../../../support/common/HippyTypes';
import { HRValueUtils } from '../../utils/HRValueUtils';

const TAG: string = "HRModal";
const DURATION = 1000

@Observed
export class HRModalView extends HippyRenderBaseView {
  static readonly VIEW_NAME = "HRModalView"
  visible:boolean = false

  transparent: boolean = true
  animationType: TransitionEffect = TransitionEffect.OPACITY.animation({ duration: DURATION, curve: Curve.Ease})
  immersionStatusBar: boolean = false
  darkStatusBarText: boolean = false
  autoHideStatusBar: boolean = false
  autoHideNavigationBar: boolean = false

  constructor(ctx: NativeRenderContext) {
    super(ctx)
  }
  setProp(propKey: string, propValue: HippyAny | HippyRenderCallback): boolean {
    LogUtils.d(TAG, `modalview propkey: ${propKey}, value: ${propValue}`)
    switch (propKey) {
      case "transparent":
        this.transparent = HRValueUtils.getBoolean(propValue as HippyAny, true);
        break;
      case "animationType":
        let type = HRValueUtils.getString(propValue as string)
        if (type === 'slide') {
          this.animationType = TransitionEffect.move(TransitionEdge.BOTTOM).animation({ duration: DURATION, curve: Curve.Ease})
        } else if (type === 'fade') {
          this.animationType = TransitionEffect.OPACITY.animation({ duration: DURATION, curve: Curve.Ease})
        } else if (type === 'slide_fade') {
          this.animationType = TransitionEffect.OPACITY.animation({ duration: DURATION, curve: Curve.Ease}).combine(TransitionEffect.move(TransitionEdge.BOTTOM))
        }

        break;
      case "immersionStatusBar":
        this.immersionStatusBar = HRValueUtils.getBoolean(propValue as HippyAny, false);
        break;
      case "darkStatusBarText":
        this.darkStatusBarText = HRValueUtils.getBoolean(propValue as HippyAny, false);
        break;
      case "autoHideStatusBar":
        this.autoHideStatusBar = HRValueUtils.getBoolean(propValue as HippyAny, false);
        break;
      case "autoHideNavigationBar":
        this.autoHideNavigationBar = HRValueUtils.getBoolean(propValue as HippyAny, false);
        break;
      default:
        break
    }
    return super.setProp(propKey, propValue as HippyAny)
  }
}

@CustomDialog
struct HippyDialog {
  controller: CustomDialogController
  @ObjectLink renderView: HRModalView
  @ObjectLink children: HippyObservedArray<HippyRenderBaseView>
  @BuilderParam buildRenderView: ($$: HippyRenderBaseView, parent: HRComponent) => void
  @BuilderParam buildCustomRenderView: ($$: HippyRenderBaseView) => void | null

  build() {
    if (this.renderView.visible) {
      Stack() {
        ForEach(this.children, (item: HippyRenderBaseView) => {
          this.buildRenderView(item, null)
        }, (item: HippyRenderBaseView) => item.tag + '')
      }
      .applyRenderViewBaseAttr(this.renderView)
      .backgroundColor(this.renderView.transparent ? Color.Transparent : this.renderView.cssBackgroundColor)
      .transition(this.renderView.animationType)
    }
  }
}

@Component
export struct HRModal {
  @ObjectLink renderView: HRModalView
  @ObjectLink children: HippyObservedArray<HippyRenderBaseView>
  @BuilderParam buildRenderView: ($$: HippyRenderBaseView, parent: HRComponent) => void
  @BuilderParam buildCustomRenderView: ($$: HippyRenderBaseView) => void | null
  private dialogController: CustomDialogController = {} as CustomDialogController

  handleCancel(): void {
    LogUtils.d(TAG, `handleCancel EVENT_MODAL_REQUEST_CLOSE`)
    HREventUtils.sendComponentEvent(this.renderView.ctx, this.renderView.tag, HREventUtils.EVENT_MODAL_REQUEST_CLOSE, null)
  }

  aboutToAppear() {
    this.dialogController = new CustomDialogController({
      builder: HippyDialog({
        renderView: this.renderView,
        children: this.children,
        buildRenderView: this.buildRenderView,
        buildCustomRenderView: this.buildCustomRenderView
      }),
      autoCancel: true,
      customStyle: true,
      alignment: DialogAlignment.Center,
      openAnimation: { duration: 0, onFinish: ()=>{
        this.renderView.visible = true
      }},
      closeAnimation: { duration: 0 },
      cancel: this.handleCancel,
      maskColor:Color.Transparent
    });
    this.dialogController.open();
    HREventUtils.sendComponentEvent(this.renderView.ctx, this.renderView.tag, HREventUtils.EVENT_MODAL_SHOW, null)
  }

  aboutToDisappear() {
    this.renderView.visible = false
    LogUtils.d(TAG, `aboutToDisappear`)
    setTimeout(()=> {
      this.dialogController.close()
    }, DURATION)
  }

  build() {

  }
}

// base props for all components
@Extend(Stack)
function applyRenderViewBaseAttr($$: HippyRenderBaseView) {
  .key(HIPPY_COMPONENT_KEY_PREFIX + $$.tag)
  .backgroundColor($$.cssBackgroundColor)
  // .position({x: $$.cssPositionX, y: $$.cssPositionY})
  .size({width:$$.cssWidth, height: $$.cssHeight})
  .opacity($$.cssOpacity)
  .clip($$.cssOverflow)
  .visibility(($$ as HippyRenderBaseView).cssVisibility) // must add as, otherwise the compiler has error
  .zIndex($$.cssZIndex)
  .accessibilityText($$.cssAccessibilityLabel)
  .focusable($$.cssFocusable)
  .border($$.cssBorder)
  .shadow($$.cssShadow)
  .linearGradient($$.cssLinearGradient)
  .backgroundImage($$.cssBackgroundImage)
  .backgroundImageSize($$.cssBackgroundImageSize)
  .backgroundImagePosition($$.cssBackgroundImagePosition)
  .transform($$.cssMatrix)
  .rotate($$.cssRotate)
  .scale($$.cssScale)
  .translate($$.cssTranslate)
  .hitTestBehavior($$.hitTestBehavior)
  .onClick($$.eventClick)
}
