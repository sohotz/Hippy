/*
 * Tencent is pleased to support the open source community by making
 * Hippy available.
 *
 * Copyright (C) 2022 THL A29 Limited, a Tencent company.
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { HippyAny, HippyMap, HippyRenderCallback } from '../../../support/common/HippyTypes';
import { HRComponent } from '../../HippyRenderView';
import { NativeRenderContext } from '../../NativeRenderContext';
import { HREventUtils } from '../../utils/HREventUtils'
import { HRRect } from '../../utils/HRTypes';
import HippyRenderBaseView, {
  HippyObservedArray,
  HIPPY_COMPONENT_KEY_PREFIX } from '../base/HippyRenderBaseView';
import { LogUtils } from '../../../support/utils/LogUtils';
import { HRValueUtils } from '../../utils/HRValueUtils';
import { HRListView } from '../list/HRListView';

@Observed
export class HRPullHeaderView extends HippyRenderBaseView {
  private readonly TAG = "HRPullHeaderView"
  private CURRENT_OFFSET: string = "contentOffset";

  constructor(ctx: NativeRenderContext) {
    super(ctx)
  }

  setProp(propKey: string, propValue: HippyAny | HippyRenderCallback): boolean {
    // TODO: xxxxx
    LogUtils.d(this.TAG, "setProp: propKey " + propKey + ", propValue: " + propValue)
    switch (propKey) {
      case "cssPositionX":
        this.cssPositionX = HRValueUtils.getNumber(propValue as HippyAny);
        break;
      case "cssPositionY":
        this.cssPositionY = HRValueUtils.getNumber(propValue as HippyAny);
        break;
      default:
        break;
    }
    let ret : boolean = super.setProp(propKey, propValue as HippyAny)
    if (propKey === "visibility") {
      LogUtils.d(this.TAG, "setProp: visibility " + this.cssVisibility)
    }
    return ret;
  }

  call(method: string, params: Array<HippyAny>, callback: HippyRenderCallback | null): void {
    LogUtils.d(this.TAG, "call: method " + method + ", params: " + params)
    switch (method) {
      case "collapsePullHeader":
        this.onHeadRefreshFinish()
        break
      case "collapsePullHeaderWithOptions":
        {
          let map = HRValueUtils.getMap(params[0])
          if (!map) {
            break
          }
          let collapseTime = HRValueUtils.getNumber(map.get('time'))
          if (collapseTime > 0) {
            setTimeout(() => {
              LogUtils.d(this.TAG, "delay : " + collapseTime)
              this.onHeadRefreshFinish()
            }, collapseTime);
          } else {
            this.onHeadRefreshFinish()
          }
        }
        break
      case 'expandPullHeader':
        break
      default:
        break
    }
  }

  onHeadRefreshFinish() {
    let listView:HRListView = this.parentView as HRListView
    listView.uiCtx?.runScopedTask(()=>{
      listView.scroller.scrollToItemInGroup(1, 1)
      listView.edgeState = 0
    })
  }
}

@Component
export struct HRPullHeader {
  private readonly TAG = "HRPullHeader"
  @ObjectLink renderView: HRPullHeaderView
  @ObjectLink children: HippyObservedArray<HippyRenderBaseView>
  @BuilderParam buildRenderView: ($$: HippyRenderBaseView, parent: HRComponent) => void
  @BuilderParam buildCustomRenderView: ($$: HippyRenderBaseView) => void | null
  private controller: SwiperController = new SwiperController()
  private PAGE_ITEM_POSITION: string = "position";
  @State index: number = 0

  aboutToAppear() {
  }

  aboutToDisappear() {
  }

  build() {
    Stack() {
      ForEach(this.children, (item: HippyRenderBaseView) => {
        this.buildRenderView(item, null)
      }, (item: HippyRenderBaseView) => item.tag + '')
    }
    .applyRenderViewBaseAttr(this.renderView)
  }
}

// base props for all components
@Extend(Stack)
function applyRenderViewBaseAttr($$: HippyRenderBaseView) {
  .key(HIPPY_COMPONENT_KEY_PREFIX + $$.tag)
  .backgroundColor($$.cssBackgroundColor)
  .position({x: $$.cssPositionX, y: $$.cssPositionY})
  .size({width:$$.cssWidth, height: $$.cssHeight})
  .opacity($$.cssOpacity)
  .clip($$.cssOverflow)
  .visibility(($$ as HippyRenderBaseView).cssVisibility) // must add as, otherwise the compiler has error
  // .zIndex($$.cssZIndex)
  .accessibilityText($$.cssAccessibilityLabel)
  .focusable($$.cssFocusable)
  .border($$.cssBorder)
  .shadow($$.cssShadow)
  .linearGradient($$.cssLinearGradient)
  .backgroundImage($$.cssBackgroundImage)
  .backgroundImageSize($$.cssBackgroundImageSize)
  .backgroundImagePosition($$.cssBackgroundImagePosition)
  .transform($$.cssMatrix)
  .rotate($$.cssRotate)
  .scale($$.cssScale)
  .translate($$.cssTranslate)
  .hitTestBehavior($$.hitTestBehavior)
  .onClick($$.eventClick)
}
